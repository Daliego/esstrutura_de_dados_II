void MorrisInOrderSearch() {
		    TreeNo<T> *p = root, *tmp;
		    
		    while(p != 0) {
		        if(p->left == 0) {
		            visit(p);
		            p = p->right;
		        }
		        else {
		            tmp = p->left;
		        
		            while(tmp->right != 0 && tmp->right != p){
		                tmp = tmp->right;
		            }

		            if(tmp->right == 0) {
                        tmp->right = p;
                        p = p->left;
                    } else {
		                visit(p);
		                tmp->right = 0;
		                p = p->right;
		            }
		            
		        }
		    }
		}
Atividade Morris PRE-ORDER (Percurso In Order – VLR):


A) O resultado é: 3 -> 5 -> 7 -> 10 -> 15 -> 20 -> 24

B)  1 - Um ponteiro p para é apontado para a raiz da árvore e um ponteiro temporário tmp.

    2 - Então em um loop principal, a cada iteração, verificamos se p é nulo. Se for, significa que chegamos ao 
    final do percurso e o algoritmo pode ser encerrado.

    3 - Se o nó à esquerda de p for nulo (p->left == 0), isso indica que não há mais nós a serem visitados à esquerda de p.

    4 - Se o nó à esquerda de p não for nulo, precisamos encontrar o nó mais à direita na subárvore esquerda de p e
    definimos tmp como o nó à esquerda de p.

    5 - Depois entramos em um loop enquanto tmp->right não for nulo e tmp->right não apontar para p, continuamos adentrando
    ao nó mais à direita na subárvore esquerda de p, executando tmp = tmp->right.

    6 - Continuando, se tmp->right for nulo, isso significa que ainda não visitamos o nó atual (p), portanto, 
    definimos tmp->right = p para estabelecer uma conexão com a árvore, o que nos permite voltar a esse nó a 
    partir do nó mais à direita. E p é movido para o seu nó à esquerda (p = p->left)

    7 - E para finalizar, se tmp->right não for nulo, o que indica que já visitamos o nó atual (p) e seu nó à direita. 
    Portanto, podemos visitar o nó p, definir tmp->right como nulo para remover a conexão temporária e movemos p para o nó mais à 
    direita (p = p->right).

C) O algoritmo foi testado e está funcionando corretamente.
